create extension if not exists "pgjwt" with schema "extensions";


create table "public"."blogs" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "title" text,
    "content" text,
    "image_url" text,
    "user_id" text,
    "is_shared" boolean not null default false,
    "likes" bigint not null default '0'::bigint
);


alter table "public"."blogs" enable row level security;

create table "public"."shared-blogs" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "title" text,
    "content" text,
    "image_url" text,
    "user_id" text,
    "likes" bigint not null default '0'::bigint
);


alter table "public"."shared-blogs" enable row level security;

create table "public"."user_likes" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "user_id" text not null,
    "blog_id" bigint not null
);


alter table "public"."user_likes" enable row level security;

CREATE UNIQUE INDEX blogs_pkey ON public.blogs USING btree (id);

CREATE UNIQUE INDEX likes_pkey ON public.user_likes USING btree (id);

CREATE UNIQUE INDEX "shared-blogs_pkey" ON public."shared-blogs" USING btree (id);

alter table "public"."blogs" add constraint "blogs_pkey" PRIMARY KEY using index "blogs_pkey";

alter table "public"."shared-blogs" add constraint "shared-blogs_pkey" PRIMARY KEY using index "shared-blogs_pkey";

alter table "public"."user_likes" add constraint "likes_pkey" PRIMARY KEY using index "likes_pkey";

alter table "public"."shared-blogs" add constraint "shared-blogs_id_fkey" FOREIGN KEY (id) REFERENCES blogs(id) ON DELETE CASCADE not valid;

alter table "public"."shared-blogs" validate constraint "shared-blogs_id_fkey";

alter table "public"."user_likes" add constraint "user_likes_blog_id_fkey" FOREIGN KEY (blog_id) REFERENCES blogs(id) ON DELETE CASCADE not valid;

alter table "public"."user_likes" validate constraint "user_likes_blog_id_fkey";

set check_function_bodies = off;

CREATE OR REPLACE FUNCTION public.decrement_likes(row_id bigint)
 RETURNS void
 LANGUAGE sql
AS $function$update "blogs"
  set likes = likes - 1
  where id = row_id;$function$
;

CREATE OR REPLACE FUNCTION public.increment_likes(row_id bigint)
 RETURNS void
 LANGUAGE sql
AS $function$update "blogs"
  set likes = likes + 1
  where id = row_id;$function$
;

grant delete on table "public"."blogs" to "anon";

grant insert on table "public"."blogs" to "anon";

grant references on table "public"."blogs" to "anon";

grant select on table "public"."blogs" to "anon";

grant trigger on table "public"."blogs" to "anon";

grant truncate on table "public"."blogs" to "anon";

grant update on table "public"."blogs" to "anon";

grant delete on table "public"."blogs" to "authenticated";

grant insert on table "public"."blogs" to "authenticated";

grant references on table "public"."blogs" to "authenticated";

grant select on table "public"."blogs" to "authenticated";

grant trigger on table "public"."blogs" to "authenticated";

grant truncate on table "public"."blogs" to "authenticated";

grant update on table "public"."blogs" to "authenticated";

grant delete on table "public"."blogs" to "service_role";

grant insert on table "public"."blogs" to "service_role";

grant references on table "public"."blogs" to "service_role";

grant select on table "public"."blogs" to "service_role";

grant trigger on table "public"."blogs" to "service_role";

grant truncate on table "public"."blogs" to "service_role";

grant update on table "public"."blogs" to "service_role";

grant delete on table "public"."shared-blogs" to "anon";

grant insert on table "public"."shared-blogs" to "anon";

grant references on table "public"."shared-blogs" to "anon";

grant select on table "public"."shared-blogs" to "anon";

grant trigger on table "public"."shared-blogs" to "anon";

grant truncate on table "public"."shared-blogs" to "anon";

grant update on table "public"."shared-blogs" to "anon";

grant delete on table "public"."shared-blogs" to "authenticated";

grant insert on table "public"."shared-blogs" to "authenticated";

grant references on table "public"."shared-blogs" to "authenticated";

grant select on table "public"."shared-blogs" to "authenticated";

grant trigger on table "public"."shared-blogs" to "authenticated";

grant truncate on table "public"."shared-blogs" to "authenticated";

grant update on table "public"."shared-blogs" to "authenticated";

grant delete on table "public"."shared-blogs" to "service_role";

grant insert on table "public"."shared-blogs" to "service_role";

grant references on table "public"."shared-blogs" to "service_role";

grant select on table "public"."shared-blogs" to "service_role";

grant trigger on table "public"."shared-blogs" to "service_role";

grant truncate on table "public"."shared-blogs" to "service_role";

grant update on table "public"."shared-blogs" to "service_role";

grant delete on table "public"."user_likes" to "anon";

grant insert on table "public"."user_likes" to "anon";

grant references on table "public"."user_likes" to "anon";

grant select on table "public"."user_likes" to "anon";

grant trigger on table "public"."user_likes" to "anon";

grant truncate on table "public"."user_likes" to "anon";

grant update on table "public"."user_likes" to "anon";

grant delete on table "public"."user_likes" to "authenticated";

grant insert on table "public"."user_likes" to "authenticated";

grant references on table "public"."user_likes" to "authenticated";

grant select on table "public"."user_likes" to "authenticated";

grant trigger on table "public"."user_likes" to "authenticated";

grant truncate on table "public"."user_likes" to "authenticated";

grant update on table "public"."user_likes" to "authenticated";

grant delete on table "public"."user_likes" to "service_role";

grant insert on table "public"."user_likes" to "service_role";

grant references on table "public"."user_likes" to "service_role";

grant select on table "public"."user_likes" to "service_role";

grant trigger on table "public"."user_likes" to "service_role";

grant truncate on table "public"."user_likes" to "service_role";

grant update on table "public"."user_likes" to "service_role";

create policy "Enable all users to view shared blogs"
on "public"."blogs"
as permissive
for select
to authenticated
using ((is_shared = true));


create policy "Enable users to view their own non-shared blogs only"
on "public"."blogs"
as permissive
for select
to authenticated
using ((((auth.uid())::text = user_id) AND (is_shared = false)));



